<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot2学习笔记（1）基础篇</title>
      <link href="/2022/11/25/notes/springboot2-1/"/>
      <url>/2022/11/25/notes/springboot2-1/</url>
      
        <content type="html"><![CDATA[<h1 id="黑马程序员SpringBoot2学习笔记"><a href="#黑马程序员SpringBoot2学习笔记" class="headerlink" title="黑马程序员SpringBoot2学习笔记"></a>黑马程序员SpringBoot2学习笔记</h1><p><a href="https://www.bilibili.com/video/BV15b4y1a7yG">Bilibili视频地址</a></p><h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><p><a href="https://spring.io/">Spring官网</a></p><p>SpringBoot是Spring中的老大</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> SpringBoot入门 </tag>
            
            <tag> Spring2.x </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（2）</title>
      <link href="/2022/11/25/notes/vue2-2/"/>
      <url>/2022/11/25/notes/vue2-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（2）</p><h2 id="Vue-cli"><a href="#Vue-cli" class="headerlink" title="Vue-cli"></a>Vue-cli</h2><p>什么是单页面应用程序，SPA（Single Page Application）</p><p>所有的功能与交互都在这唯一的一个页面内完成。</p><p>vue-cli是Vue.js开发的标准工具。简化了程序员基于webpack创建工程化的Vue项目的工程。</p><p><a href="https://cli.vuejs.org/zh/">中文官网</a></p><h3 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h3><p>它是npm上的一个全局包使用<code>npm install -g @vue/cli</code>来进行安装，安装完成后使用<code>vue --version</code>来查看是否安装成功</p><p><strong>创建项目</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目</span></span><br><span class="line">$ vue create &lt;项目名&gt;</span><br></pre></td></tr></table></figure><p>会出现如下提示，并选择手动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v5.0.8</span><br><span class="line">? Please pick a preset:</span><br><span class="line">  <span class="comment"># vue3预设</span></span><br><span class="line">&gt; Default ([Vue 3] babel, eslint)</span><br><span class="line">  <span class="comment"># vue2预设</span></span><br><span class="line">  Default ([Vue 2] babel, eslint)</span><br><span class="line">  <span class="comment"># 手动选择要安装哪些功能</span></span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>使用空格选择与取消部分选项，然后回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125163616553.png" alt="选择需要的下载"></p><p>选择vue2.x，然后回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125163924064.png" alt="选择vue2.x"></p><p>选择Less，回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164020628.png" alt="选择Less"></p><p>选择第一项，将babel等插件的配置项，放到自己独立的文件中，回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164240909.png" alt="选择独立配置"></p><p>输入y保存我们的选项作为预设，回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164417096.png" alt="保存预设"></p><p>输入为预设取的别名，然后回车</p><p><img src="https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/_post/notes/vue2-2/image-20221125164516315.png" alt="为预设取别名"></p><p>等待加载完成后，进入项目目录，执行<code>npm run serve</code>命令让项目跑起来，打开控制台打印的url地址，查看效果。</p><h3 id="src目录和构成"><a href="#src目录和构成" class="headerlink" title="src目录和构成"></a>src目录和构成</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">assets文件夹：存放项目中用到的静态资源文件，例如：css样式表、图片资源</span><br><span class="line">components文件夹：程序员封装的、可复用的组件，都要放到componts目录下</span><br><span class="line">main.js文件：项目的入口，整个项目的运行，要先执行main.js</span><br><span class="line">App.vue：是项目的根组件</span><br></pre></td></tr></table></figure><h3 id="vue项目的运行流程"><a href="#vue项目的运行流程" class="headerlink" title="vue项目的运行流程"></a>vue项目的运行流程</h3><p>通过main.js把App.vue渲染到index.html的指定区域中</p><ol><li>App.vue 用来编写待渲染的模板结构</li><li>index.html中需要预留一个<strong>el区域</strong></li><li>mian.js把App.vue渲染到了index.html所预留的区域中</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $mount(&#x27;#app&#x27;)就相当于el: &#x27;#app&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="vue组件"><a href="#vue组件" class="headerlink" title="vue组件"></a>vue组件</h2><p>只要是<code>.vue</code>结尾的文件，就是vue组件</p><h3 id="vue组件的三个组成部分"><a href="#vue组件的三个组成部分" class="headerlink" title="vue组件的三个组成部分"></a>vue组件的三个组成部分</h3><ol><li>template组件的模板结构</li><li>script         组件的JavaScript行为</li><li>style          组件的样式</li></ol><p><strong>script</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 默认导出，这是固定写法</span><br><span class="line">    export default &#123;</span><br><span class="line">        // .vue组件中的data不能像之前一样，不能指向对象。</span><br><span class="line">        // 组件中的data必须是一个函数</span><br><span class="line">        /*data: &#123;</span><br><span class="line">            username: &#x27;张三&#x27;</span><br><span class="line">        &#125;*/</span><br><span class="line">        data() &#123;</span><br><span class="line">            // 这个return出去的对象中，可以定义数据</span><br><span class="line">            return &#123;</span><br><span class="line">                username: &#x27;张三&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        method: &#123;</span><br><span class="line">            changeName() &#123;</span><br><span class="line">                // 在组件中，this就表示当前组件的实例对象</span><br><span class="line">                console.log(this);</span><br><span class="line">                this.username = &#x27;李四&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件中的侦听器</span><br><span class="line">        watch: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件中的计算属性</span><br><span class="line">        computed: &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;,</span><br><span class="line">        // 当前组件的过滤器</span><br><span class="line">filters: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .test-box &#123;</span><br><span class="line">     background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>在template节点下只能有一个根元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 错误示范 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 正确示范 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;div class=&quot;test-box&quot;&gt;</span><br><span class="line">        &lt;h3&gt;这是用户自定义的Test.vue---&#123;&#123; username &#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;button @click=&quot;changeName&quot;&gt;修改用户名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>在style节点支持less语法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 支持less --&gt;</span><br><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 不支持less，支持css，可不写 --&gt;</span><br><span class="line">&lt;style lang=&quot;css&quot;&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="组件之间的父子关系"><a href="#组件之间的父子关系" class="headerlink" title="组件之间的父子关系"></a>组件之间的父子关系</h3><p>组件封装好之后，彼此之间是相互独立的，不存在父子关系</p><p>在使用组件时，根据彼此的嵌套关系，形成了父子关系，兄弟关系</p><h3 id="使用组件的三个步骤"><a href="#使用组件的三个步骤" class="headerlink" title="使用组件的三个步骤"></a>使用组件的三个步骤</h3><ol><li>使用import语法导入需要的组件</li><li>使用components节点注册组件</li><li>以标签的形式使用刚才注册的组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;!-- 以标签形式，使用注册好的组件 --&gt;</span><br><span class="line">        &lt;Left&gt;&lt;/Left&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 导入需要使用的.vue组件</span><br><span class="line">import Left from &#x27;@/components/left.vue&#x27;;</span><br><span class="line">    import Right from &#x27;@/components/right.vue&#x27;;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            &#x27;Left&#x27;: Left,</span><br><span class="line">            &#x27;Right&#x27;: Right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>visual studio code 路径提示插件<code>Path Autocomplete</code></p><h3 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h3><p>之前使用components注册的是私有组件，只能在被导入的组件里使用</p><p>在vue项目的<strong>main.js</strong>入口文件中，通过<code>Vue.component()</code>方法，可以注册全局组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Count</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Count.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个参数是组件注册名，第二个参数是需要注册的组件</span></span><br><span class="line"><span class="comment">// 组件注册名建议大写开头</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">componnent</span>(<span class="string">&#x27;MyCount&#x27;</span>,<span class="title class_">Count</span>)</span><br></pre></td></tr></table></figure><p>Visual Studio Code自动补齐标签插件<code>Auto Close Tag</code></p><h3 id="组件里的props"><a href="#组件里的props" class="headerlink" title="组件里的props"></a>组件里的props</h3><p>组件的自定义属性，在封装通用组件的时候，合理使用props可以极大提高组件的复用性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">// props是自定义属性，允许使用者通过自定义属性，为当前组件指定初始值</span></span><br><span class="line">    <span class="comment">// 在使用标签引入时使用属性来传值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &lt;MyCount init=&quot;9&quot;&gt;&lt;/MyCount&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">props</span>: [<span class="string">&#x27;init&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2入门笔记（1）</title>
      <link href="/2022/11/13/notes/vue2/"/>
      <url>/2022/11/13/notes/vue2/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员Vue2"><a href="#Bilibili黑马程序员Vue2" class="headerlink" title="Bilibili黑马程序员Vue2"></a><a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1zq4y1p7ga/?vd_source=43f3f41b9a99cfe3d5248db59a3897c7">Bilibili黑马程序员Vue2+vue3</a>教程的学习笔记（1）</p><h2 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h2><ul><li>模块化</li><li>组件化</li><li>规范化</li><li>自动化<br>比如开发时热部署</li></ul><p>前端工程化具体解决方案：<strong>webpack</strong>（还有其他的，但是这个较为流行）</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>webpack是前端项目工程化的具体解决方案。</p><p>能够压缩代码、处理浏览器端JavaScript兼容性、性能优化。</p><h3 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建node项目</span></span><br><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在项目根目录中创建src源代码目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在src中创建index.html与index.js</span></span><br><span class="line">$ <span class="built_in">cd</span> src</span><br><span class="line">$ <span class="built_in">touch</span> index.html</span><br><span class="line">$ <span class="built_in">touch</span> index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装JQuery</span></span><br><span class="line">$ npm install npm jquery --save</span><br><span class="line">$ npm install npm jquery -S</span><br></pre></td></tr></table></figure><p>使用ES6导入JQuery</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入jquery第三方包，并使用变量$接收</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line"></span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 实现奇偶变色</span></span><br><span class="line">  $(<span class="string">&#x27;li:odd&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">  $(<span class="string">&#x27;li:even&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-color&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在index.html中导入包含以上代码的index.js文件后，会出现语法错误，因为浏览器不支持ES6语法。可以使用webpack来帮我们解决。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装webpack相关的两个包，--save-dev让包保存在devDependencies节点中</span></span><br><span class="line"><span class="comment"># --save-dev表示只在开发阶段使用到的包（4.7.2版本好像有问题，目前直接安装最新版本就能解决）</span></span><br><span class="line">$ npm install webpack@5.42.1 webpack-cli@4.7.2 --save-dev</span><br><span class="line">$ npm install webpack@5.42.1 webpack-cli@4.7.2 --D</span><br></pre></td></tr></table></figure><p>在项目根目录中，创建名为webpack.config.js的webpack配置文件，初始化内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向外导出一个webpack配置对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>  <span class="comment">// mode用来指定构建模式，development（开发） production（生产）</span></span><br><span class="line">  <span class="comment">// 使用development打包速度快，代码不会压缩，项目体积大</span></span><br><span class="line">  <span class="comment">// 使用production打包速度慢，代码会压缩，项目体积小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在package.json的scripts阶段下，新增dev脚本（也可以叫其他的名字）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack&quot;</span> <span class="comment">// 使用npm run xxx执行对应脚本，如：npm run dev</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>$ npm run dev</code>来使用webpack工具，它会先读取webpack.config.js这个文件，然后根据配置在项目根目录生成一个dist目标目录，其中有一个main.js脚本文件，并且这个main.js包含index.js与jquery.js的代码</p><p>然后再在index.html中引入main.js代码，就能够运行了，没有兼容性问题。</p><p>webpack4.x与5.x默认打包的入口文件为&#x2F;src&#x2F;index.js，默认输出文件的路径为&#x2F;dist&#x2F;main.js，可以在webpack.config.js配置文件中可以修改默认配置，通过entry节点可以指定导报的入口，通过output节点指定打包的出口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/index.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack中的插件"><a href="#webpack中的插件" class="headerlink" title="webpack中的插件"></a>webpack中的插件</h3><p>可以拓展webpack的能力</p><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p>每当修改了源代码，就会对项目进行构建和打包</p><p>使用<code>$ npm install webpack-dev-server@3.11.2 --save-dev</code>安装</p><p>安装后需要对package.json &gt; script中的dev命令进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack serve&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>$ npm run dev</code>运行项目，会发现程序一直在监听而不会退出，一旦源码进行修改项目就会重新打包。<strong>每次重新部署生成的目标文件并不会放在物理磁盘上，而是在内存中，能够通过控制台提示的地址访问</strong></p><p>默认访问此插件提供的http服务地址，是访问项目根目录，为了能够打开地址能够直接访问index首页，可以将&#x2F;src&#x2F;index.html复制一份放在项目根目录中，这里就可以用<strong>web-webpack-plugin</strong>第三方插件来帮我们完成</p><h4 id="web-webpack-plugin"><a href="#web-webpack-plugin" class="headerlink" title="web-webpack-plugin"></a>web-webpack-plugin</h4><p>使用<code>$ npm install html-webpack-plugin@5.3.2 -save-dev</code>安装此插件</p><p>在webpack.config.js配置文件中中配置html-webpack-plugin</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 得到构造函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建HTML插件实例对象</span></span><br><span class="line"><span class="keyword">const</span> htmlPlugin = <span class="keyword">new</span> <span class="title class_">HtmlPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,   <span class="comment">// 指定源文件的存放路径</span></span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;./index.html&#x27;</span>        <span class="comment">// 指定生成文件的存放路径</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [htmlPlugin]           <span class="comment">// 通过plugins节点，使htmlPlugin插件生效</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以让webpack自动打开浏览器，也可以配置端口。需要在webpack.config.js的配置对象中配置devServer节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">80</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="webpack中的loader（加载器）"><a href="#webpack中的loader（加载器）" class="headerlink" title="webpack中的loader（加载器）"></a>webpack中的loader（加载器）</h3><p>webpack默认只能处理.js文件，为了处理其他文件就需要对应的loader</p><p>使用<code>$ npm install style-loader@3.0.0 css-loader@5.2.6 -D</code>安装处理CSS文件的加载器，然后在webpack.config.js配置对象的module节点增加rules节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 所有第三方模块的匹配规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 文件后缀为.css</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 使用到的插件</span></span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理less文件</p><ul><li>Less是一门CSS预处理语言，css是一种用来表现HTML或XML等文件样式的计算机语言。</li><li>less扩展了CSS语言，增加了变量、Mixin、函数等特性。</li><li>css可以被浏览器直接识别，less需要先编译为css。</li></ul><p>运行<code>$ npm install less-loader@10.0.1 less@4.1.1 -D</code>命令下载对应加载器（可以不用下载less，因为less-loader依赖less，会自动安装），并在webpack.config.js配置对象的module &gt; rules数组进行配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="comment">// 所有第三方模块的匹配规则</span></span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 文件后缀为.css</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 使用到的插件</span></span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>小图片优化：base64，精灵图</p><p>运行<code>$ npm install url-loader@4.1.1 file-loader@6.2.0 -D</code>命令，在webpack.config.js配置对象的module &gt; rules数组中添加规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="string">&#x27;/\.jpg|png|gif$/&#x27;</span>,</span><br><span class="line">      <span class="comment">// ?后为参数项</span></span><br><span class="line">      <span class="comment">// limit指定图片大小，（byte），只有小于等于这个大小的图片才会被转为base64格式的图片</span></span><br><span class="line">      <span class="attr">use</span>: <span class="string">&#x27;url-loader?limit=2229&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理高级语法"><a href="#处理高级语法" class="headerlink" title="处理高级语法"></a>处理高级语法</h4><p>支持装饰器语法</p><p>运行<code>npm install babel-loader@8.2.2 @babel/core@7.14.6 @babel/plugin-proposal-decorators@7.14.5 -D</code>下载webpack对应的babel加载器和babel的插件</p><p><strong>@babel&#x2F;<a href="mailto:&#x63;&#x6f;&#114;&#101;&#64;&#55;&#46;&#49;&#52;&#46;&#x36;">&#x63;&#x6f;&#114;&#101;&#64;&#55;&#46;&#49;&#52;&#46;&#x36;</a></strong></p><p>这个前面的@babel表示babel公司的私有包，&#x2F;core表示这个公司名下的core第三方包，@7.14.6表示版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js/</span>,</span><br><span class="line">          <span class="attr">use</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 排除项，不处理第三方包</span></span><br><span class="line">          <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上只是匹配了规则，在项目根目录中还要创建babel.config.js的配置文件，来应用bale旗下的插件（插件的插件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 生命babel可用的插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;@babel/plugin-proposal-decorators&#x27;</span>,&#123;<span class="attr">legacy</span>: <span class="literal">true</span>&#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build配置"><a href="#build配置" class="headerlink" title="build配置"></a>build配置</h2><p>目前配置后webpack只能将项目生成在内存中，如果想发布项目怎么办？</p><p>在package.json文件中的scripts中添加build节点</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --mode production&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自动清理dist文件夹"><a href="#自动清理dist文件夹" class="headerlink" title="自动清理dist文件夹"></a>自动清理dist文件夹</h2><p>使用<code>$ npm install clean-webpack-plugin --save-dev</code>命令进行安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">CleanWebpackPlugin</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h2><p>因为生成的代码与源代码不一致，就导致报错位置不能与源代码对应，Source Map保存信息文件，存储生成代码位置信息。在webpack.config.js的配置对象中添加节点<code>devtool: &#39;eval-source-map&#39;</code>，只在开发时使用此工具。</p><h3 id="只定位行号不暴露源码"><a href="#只定位行号不暴露源码" class="headerlink" title="只定位行号不暴露源码"></a>只定位行号不暴露源码</h3><p><code>devtool: &#39;nosources-source-map&#39;</code></p><h2 id="webpack取别名"><a href="#webpack取别名" class="headerlink" title="webpack取别名"></a>webpack取别名</h2><p>将@表示源码根目录，在webpack.config.js配置对象节点中添加以下内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line"><span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装浏览器vue调试工具"><a href="#安装浏览器vue调试工具" class="headerlink" title="安装浏览器vue调试工具"></a>安装浏览器vue调试工具</h2><p>在Chrome安装vue调试工具</p><p><a href="https://devtools.vuejs.org/">下载浏览器插件</a></p><p>更多 -&gt; 更多工具 -&gt; 扩展工具 -&gt; 开发者模式 -&gt; 安装插件</p><p>配置插件 -&gt; 详情 -&gt; 允许访问文件网址 </p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>用于构建用户界面的前端框架</p><p>需要学习vue框架的规范</p><p>vue的指令、组件、路由、Vuex、Vue组件库</p><h3 id="Vue的特性"><a href="#Vue的特性" class="headerlink" title="Vue的特性"></a>Vue的特性</h3><h4 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a>数据驱动视图</h4><p>Vue将获取到的数据自动渲染到页面结构</p><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><p>在网页中，form表单负责采集数据，ajax负责传递数据</p><h4 id="工作原理：MVVM"><a href="#工作原理：MVVM" class="headerlink" title="工作原理：MVVM"></a>工作原理：MVVM</h4><p>Model、View、ViewModel</p><p>Model：表示当前页面渲染时所依赖的数据源<br>View： 表示当前页面所渲染的DOM结构<br>ViewModel： 表示vue的示例，他是MVVM的核心</p><h3 id="Vue基本使用"><a href="#Vue基本使用" class="headerlink" title="Vue基本使用"></a>Vue基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.7.10/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- username表示接收传入数据的变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 需要被控制的dom，选择器只会控制第一个被选择的元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 传入的数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;zhangsan&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h4><p>指令是为开发者提供的模板语法，用于辅助开发者渲染页面的基本结构</p><p>指令分为六大类</p><ul><li>内容渲染指令</li><li>属性绑定指令</li><li>事件绑定指令</li><li>双向绑定指令</li><li>条件渲染指令</li><li>列表渲染指令</li></ul><h5 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h5><p>用在内容节点的指令，指令的模板引擎不仅能插入数值，还能执行简单的javascript运算</p><h6 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h6><p>会覆盖元素中所有的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h6><p>插值表达式就是两个大括号，英文名Mustache，只是内容的占位符，不会覆盖原有的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; gender &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;lisi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;man&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><code>v-html</code></h6><p><code>v-text</code>和插值表达式只能渲染文本内容，不能渲染html标签内容，<code>v-html</code>能解决这个问题</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: <span class="string">&#x27;&lt;h1&gt;哈哈哈哈哈哈&lt;/h1&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="属性渲染指令"><a href="#属性渲染指令" class="headerlink" title="属性渲染指令"></a>属性渲染指令</h5><p>用在属性节点的指令</p><h6 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a><code>v-bind</code></h6><p>加在属性的前面并加一个冒号，也可省略<code>v-bind</code>，只加冒号</p><p>例：<code>v-bind:img=&quot;变量&quot;</code>or<code>:img=&quot;变量&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;photo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">photo</span>: <span class="string">&#x27;http://xxx.com/xxx.img&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h5><h6 id="v-on事件绑定"><a href="#v-on事件绑定" class="headerlink" title="v-on事件绑定"></a><code>v-on</code>事件绑定</h6><p>可以使用<code>@</code>来省略<code>v-on:</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ok&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;okk&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>如何传参</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add(2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>使用<code>@</code>简写事件绑定指令</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue有内置对象，$event表示js原生事件对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add($event,2)&quot;</span>&gt;</span>点击加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub(1)&quot;</span>&gt;</span>点击减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>: <span class="keyword">function</span>(<span class="params">e,num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sub</span>: <span class="keyword">function</span>(<span class="params">num</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>事件修饰符</strong></p><p>加在事件绑定的后面</p><table><thead><tr><th align="left">事件修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.prevent</td><td align="left">阻止默认行为</td></tr><tr><td align="left">.stop</td><td align="left">阻止事件冒泡</td></tr><tr><td align="left">.capture</td><td align="left">以捕获模式出发当前的事件处理函数</td></tr><tr><td align="left">.once</td><td align="left">绑定的事件只触发一次</td></tr><tr><td align="left">.self</td><td align="left">只有在event.target是当前元素自身时触发事件处理函数</td></tr></tbody></table><p><strong>阻止默认事件</strong></p><p><code>@click.prevent=&quot;show()&quot;</code></p><p><strong>按键修饰符</strong></p><table><thead><tr><th align="left">按键修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.enter</td><td align="left">按键是enter时才触发事件</td></tr><tr><td align="left">.esc</td><td align="left">按键时esc时才触发事件</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table><h5 id="双向绑定指令"><a href="#双向绑定指令" class="headerlink" title="双向绑定指令"></a>双向绑定指令</h5><p>使用<code>v-model</code>设置双向绑定数据，dom能够改变变量，变量也能改变dom</p><p><code>v-bind</code>即<code>:</code>是单向绑定，不会改变变量的值，只会变量改变dom</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">content</span>: <span class="string">&#x27;hello world&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在表单元素中使用才有意义</strong></p><p><code>v-model</code>指令的修饰符</p><table><thead><tr><th align="left"><code>v-model</code>修饰符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">.number</td><td align="left">识别绑定的数据为数值</td></tr><tr><td align="left">.trim</td><td align="left">自动去除首尾空格</td></tr><tr><td align="left">.lazy</td><td align="left">中间的变化过程不会同步到变量中</td></tr></tbody></table><h5 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h5><p>按需控制DOM的显示与隐藏</p><h6 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a><code>v-if</code></h6><p>每次动态创建或移除元素</p><p>如果刚进入页面，某些页面默认不需要被展示，而且后期也很可能不需要被展示出来，这时<code>v-if</code>性能更好</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是被v-if控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h6><p>是动态为元素添加<code>display: none</code>样式，来实现元素的显示和隐藏</p><p>如果频繁显示隐藏，用<code>v-show</code>的性能要高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>这是被v-show控制的元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">flag</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="v-else-amp-v-else-if"><a href="#v-else-amp-v-else-if" class="headerlink" title="v-else&amp;v-else-if"></a><code>v-else</code>&amp;<code>v-else-if</code></h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;&lt;条件&gt;&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>差<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="列表渲染指令（循环指令v-for）"><a href="#列表渲染指令（循环指令v-for）" class="headerlink" title="列表渲染指令（循环指令v-for）"></a>列表渲染指令（循环指令<code>v-for</code>）</h5><p>使用语法<code>item in items</code>，其中<code>in</code>是固定指令，items接收data中的数组，item接收items中的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.name&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.gender &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">item</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用语法<code>(item,index) in items</code>，其中<code>in</code>是固定指令，items接收data中的数组，item接收items中的元素，index是元素下标，从0起标</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;item.name + (index + 1)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.gender &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">item</span>: [</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>官方建议：</strong>只要用到了<code>v-for</code>指令，那么一定要绑定一个<code>:key</code>属性，并且尽量把<code>item.id</code>作为<code>:key</code>的值，这个值只能是字符串或者是数字类型，<code>:key</code>的值不能重复，否则会报错<code>Buplicat keys detected</code></p><p>使用index的值作为key的值并没有任何意义，因为这个index与内容并没有绑定关系，他是和元素顺序有关</p><p>指定key的值既能提升性能、又防止列表状态絮乱</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue过滤器（Filters）"><a href="#Vue过滤器（Filters）" class="headerlink" title="Vue过滤器（Filters）"></a>Vue过滤器（Filters）</h4><p>常用于文本格式化，可和<code>v-bind</code>属性绑定，管道符<code>|</code></p><p>前面的变量作为管道后面过滤函数的参数，过滤器函数应定义到filters节点下</p><p><strong>私有过滤器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message | toUp &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">filter</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">toUp</span>: <span class="keyword">function</span>(<span class="params">message</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> message + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>全局过滤器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;capi&#x27;</span>,<span class="keyword">function</span>(<span class="params">str</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> first = str.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> other = str.<span class="title function_">slice</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> first + other;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>过滤器也能够串联调用，例：<code>item.time | dateformat | xxx | yyy | zzz</code></p><h4 id="Vue侦听器（watch）"><a href="#Vue侦听器（watch）" class="headerlink" title="Vue侦听器（watch）"></a>Vue侦听器（watch）</h4><p>定义在watch节点下，方法名与需要监听的数据变量名一致，监视数据的变化</p><p><strong>方法格式侦听器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">username</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值：&#x27;</span> + newVal);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值：&#x27;</span> + oldVal);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到了username值的变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的方法侦听器无法在初始化页面时就执行一次，可以使用对象格式实现自动触发一次</p><p>也无法监听对象中的属性变化，可以使用对象格式的deep选项</p><p><strong>对象格式侦听器</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 侦听器处理函数</span></span></span><br><span class="line"><span class="language-javascript">handler (newVal,oldVal) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;新值：&#x27;</span> + newVal);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旧值：&#x27;</span> + oldVal);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听到了username值的变化&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 控制侦听器是否触发一次，默认为false</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">immediate</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>深度监听</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newVal);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 开启深度监听，只要对象中任何一个属性变化，都会触发对象侦听器，默认为false</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">deep</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>直接侦听对象中的某个属性</strong></p><p>方法名包裹单引号</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;info.username&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">info</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;info.username&#x27;</span>(newVal) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(newVal);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h4><p>通过一系列运算后，最终得到的属性值（实现代码复用），放在computed节点下</p><p>依赖的属性变化后会自动重新求值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">r:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;r&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">g:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;g&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">b:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;b&quot;</span> &gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#x27;background-color:&#x27; + rgb&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;rgb&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">r</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">g</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">b</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">rgb</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 所有的计算属性，都要定义到computed节点下</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 计算属性在定义的时候，要定义成方法格式</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// rgb作为一个计算属性，被定义成了方法格式</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 最终要返回一个生成好的rgb(x,y,z)格式字符串</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">rgb</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="variable language_">this</span>.r&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.g&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.b&#125;</span>)`</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h4><p>axios是一个专注于网络请求的库，jQuery还有很多其他的功能，过于庞大</p><p>cdn<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios的基本用法</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;请求的类型&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;请求的url地址&#x27;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>axios给收到的响应套了一层壳</p><ul><li>config</li><li>data:{}真实的数据</li><li>headers</li><li>request</li><li>status</li><li>statusText</li></ul><p><strong>axios传参</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">aixos</span>(&#123;</span><br><span class="line"><span class="comment">// 请求方式</span></span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://www.baidu.com&#x27;</span>,</span><br><span class="line"><span class="comment">// url参数</span></span><br><span class="line"><span class="attr">params</span>: &#123;</span><br><span class="line"><span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 请求体参数</span></span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;13424&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>axios返回的是Promise对象</strong></p><p><a href="https://blog.csdn.net/weixin_41817034/article/details/80492315">Promise参考博文</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果调用某个方法返回值是Promise实例，则前面可以添加await</span></span><br><span class="line"><span class="comment">// await只能用在被async“修饰的方法中”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构后重命名</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>axios直接发送请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url地址&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">// 参数</span></span><br><span class="line"><span class="attr">params</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url地址&#x27;</span>,&#123;post请求体数据&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Vue入门 </tag>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS入门笔记</title>
      <link href="/2022/11/07/notes/nodejs/"/>
      <url>/2022/11/07/notes/nodejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Bilibili黑马程序员NodeJS"><a href="#Bilibili黑马程序员NodeJS" class="headerlink" title="Bilibili黑马程序员NodeJS"></a><a href="https://www.bilibili.com/video/BV1a34y167AZ">Bilibili黑马程序员NodeJS</a></h1><p>基于<a href="https://www.bilibili.com/video/BV1a34y167AZ">Bilibili黑马程序员NodeJS教程</a>的学习记录</p><h2 id="什么是nodejs"><a href="#什么是nodejs" class="headerlink" title="什么是nodejs"></a>什么是nodejs</h2><p>nodejs是基于谷歌v8引擎的js解释器，nodejs包含npm，npm是node包管理工具</p><h2 id="如何运行js代码"><a href="#如何运行js代码" class="headerlink" title="如何运行js代码"></a>如何运行js代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行当前目录下名为xx.js的js源文件</span></span><br><span class="line">$ node xx.js</span><br></pre></td></tr></table></figure><h2 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h2><p>nodejs也和chrome的v8一样，有一些内置模块供我们使用</p><ul><li><p>fs文件模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>path路径模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入path模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>http服务模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、标准</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xx</span> = xxx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、简洁</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xx</span> = xxx;</span><br></pre></td></tr></table></figure><h2 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为npm默认下载包的地址在国外，可以切换国内的镜像源</span></span><br><span class="line"><span class="comment"># 下载镜像源快速切换工具nrm</span></span><br><span class="line">$ npm install -g nrm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像源列表</span></span><br><span class="line">$ nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用列表中的镜像，例：</span></span><br><span class="line">$ nrm use taobao</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载某个包</span></span><br><span class="line">$ npm install xxxx[@version] [--save]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载某个包</span></span><br><span class="line">$ npm uninstall xxxx[@version] [--save]</span><br></pre></td></tr></table></figure><h2 id="express"><a href="#express" class="headerlink" title="express"></a>express</h2><p>优秀的第三方模块，能够快速开发中间件</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件1</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">get</span>(<span class="string">&#x27;path1&#x27;</span>,func1);</span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">post</span>(<span class="string">&#x27;path2&#x27;</span>,func2);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Router</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件2</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;./文件1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;前缀&#x27;</span>,<span class="title class_">Router</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(端口,funciton;</span><br></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>express在收到请求时会先调用中间件</p><p>中间件的调用会根据中间件注册的顺序执行，而且会共用一个res和req，也就是说可以在上游中间件给res对象和req对象加入一些属性或方法供下游中间件使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建中间件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mw1</span>(<span class="params">req,res,next</span>) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    你的代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mw2</span>(<span class="params">req,res,next</span>) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">你的代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局生效中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册局部生效的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw2,func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册多个局部生效的中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,[mw1,mw2],func);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw1,mw2,func);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li>中间件的注册应当放在路由的前面</li><li>中间件函数中的业务完成后应当调用next函数，否则请求会停止在此中间件</li><li>中间件函数应当最后调用next函数，不能在next函数调用后还继续写代码，否则会造成代码混乱</li></ul><h3 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类"></a>中间件的分类</h3><ul><li><p>应用级别中间件<br>注册在app上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接注册在app上</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册在app的路由上</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,mw,func);</span><br></pre></td></tr></table></figure></li><li><p>路由级别中间件</p></li></ul><p>注册在Router上的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Router</span>.<span class="title function_">use</span>(mw);</span><br></pre></td></tr></table></figure><ul><li>错误级别中间件</li></ul><p>用于处理错误，防止系统崩溃的中间件，一定要在路由后注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义错误中间件，相较于普通中间件多了一个err参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mw</span> = (<span class="params">err,req,res,next</span>) =&gt; &#123;</span><br><span class="line"><span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,func);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在路由后注册才会有err对象，否则err为undefined</span></span><br><span class="line">app.<span class="title function_">use</span>(mw);</span><br></pre></td></tr></table></figure><ul><li>内置中间件</li></ul><p>express自带的中间件</p><ul><li>内置中间件-express.static()</li></ul><p>快速托管静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;prefix&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;path&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>内置中间件-express.json()</li></ul><p>解析请求体中的json数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>内置中间件-express.urlencoded()</li></ul><p>解析请求体中url-www-extended（好像叫这个吧，忘了）的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象（我也不太清楚什么意思）</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line"><span class="attr">extended</span>: <span class="literal">false</span>;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>第三方中间件</li></ul><p>别人写的优秀的第三方中间件，例如body-parser，但是<a href="mailto:&#101;&#x78;&#x70;&#114;&#101;&#x73;&#115;&#x40;&#x34;&#46;&#x31;&#x36;&#46;&#48;">&#101;&#x78;&#x70;&#114;&#101;&#x73;&#115;&#x40;&#x34;&#46;&#x31;&#x36;&#46;&#48;</a>以后就自带了这个东西<br>就是express.urlencoded()，它是基于body-parser的封装<br>首先要下载body-parser包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install body-parser --save</span><br></pre></td></tr></table></figure><p>使用方法与express.encoded()差不多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象（我也不太清楚什么意思）</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line"><span class="attr">extended</span>: <span class="literal">false</span>;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过req对象的body属性获取</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;path&#x27;</span>,<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> body = req.<span class="property">body</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">res.<span class="title function_">send</span>(body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p><strong>什么是跨域问题</strong></p><p>在浏览器控制台中会出现类似以下的报错</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://127.0.0.1/api/get?id=2206831544&amp;name=%E9%A9%AC%E6%9F%90&amp;gender=%E7%94%B7&#x27; from origin &#x27;null&#x27; has been blocked by CORS policy: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure><p>协议、域名、端口号的不同导致的跨域问题</p><p><strong>解决方案</strong></p><p>CORS（主流的解决方案，推荐使用）<br>JSONP（有缺陷的解决方案，只支持get请求）</p><h3 id="使用cors第三方中间件"><a href="#使用cors第三方中间件" class="headerlink" title="使用cors第三方中间件"></a>使用cors第三方中间件</h3><p>cors是express解决跨域问题的第三方中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载cors第三方包</span></span><br><span class="line">$ npm install cors --save</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&#x27;cors&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在引入路由之前注册cors中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在此写入路由</span></span><br></pre></td></tr></table></figure><p><strong>指定域名通过跨域请求</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定http://19maken.top才能跨域访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;http://19maken.top&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定所有域名都能跨域访问</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定请求允许的请求方法</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;POST,GET,DELETE,HEAD&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定允许所有的请求</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><p>预检请求<br>有些请求不是简单请求，会先发送OPTION请求进行预检</p><p><strong>jsonp</strong></p><p>这个东西我也不太清楚，说是要如果配置了cors，就要配置在cors的前面，然后前端会使用script标签来解析响应的内容。</p><h2 id="mysql模块"><a href="#mysql模块" class="headerlink" title="mysql模块"></a>mysql模块</h2><p>这也是第三方模块，用于数据库的连接与操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载第三方包</span></span><br><span class="line">$ npm install mysql</span><br></pre></td></tr></table></figure><p>导入mysql模块并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入mysql第三方包</span></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line"><span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line"><span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;secret&#x27;</span>,</span><br><span class="line"><span class="attr">database</span>: <span class="string">&#x27;database&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接</span></span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作连接</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT 1+1 AS solution&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is:&#x27;</span>, results[<span class="number">0</span>],solution);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p>使用带占位符的sql语句，PS：占位符使用?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、多个占位符，使用数据传数据</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT * FROM table WHERE age &gt; ? and gender = ?&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,[<span class="number">18</span>,<span class="string">&#x27;男&#x27;</span>],<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果占位符太多，可以使用对象</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;INSERT INTO table (fields) values (?)&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line"><span class="attr">field1</span>: field1,</span><br><span class="line"><span class="attr">field2</span>: field2,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,data,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="comment">// 查看受影响的行数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results.<span class="property">affectedRows</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、如果只有一个占位符，那么就可以不用使用数组传数据，直接使用数据</span></span><br><span class="line"><span class="keyword">const</span> sql = <span class="string">&#x27;SELECT * FROM table WHERE age &gt; ?&#x27;</span>;</span><br><span class="line">connection.<span class="title function_">query</span>(sql,<span class="number">18</span>,<span class="keyword">function</span>(<span class="params">error,results,fields</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>在执行操作的时候，如果执行的语句是查询语句，那么results就是一个数组，如果执行的是一个更新语句或者是删除语句，那么results就是一个对象，其中results的affectedRows属性可以查看执行后的语句所影响的行数。</p><h2 id="Web开发模式"><a href="#Web开发模式" class="headerlink" title="Web开发模式"></a>Web开发模式</h2><p>SEO?</p><p>服务端渲染</p><p>对SEO友好，但对服务器压力过大</p><p>前后端分离</p><p>服务器压力小，不用渲染页面，前端注重页面，后端注重API，对SEO不友好，但能使用VUE等框架提供的服务</p><p>如何选择？</p><p>不同的场景使用不同的模式，例如管理系统不怎么需要SEO，就可以使用前后端分离。有些网站也采用首页使用服务端渲染，其他页面使用前后端分离。</p><p><strong>身份验证</strong></p><ul><li>服务端渲染推荐使用Session认证机制。</li></ul><p>使用Cookie，它是存储在用户浏览器中一段不超过4KB的字符串，由一个名称（name）、一个值（value）和其他几个用于控制Cookie有效期、安全性和使用范围的可选属性组成。每当发起请求，会将未过期的Cookie一同发送到对应域名的服务器。服务端可以通过响应头发送Cookie给客户端。但是Cookie不安全，因为谁都可以看，会很好仿造。所以使用Cookie+Session认证。<strong>因为Session中的数据是对应客户端的</strong>客户端只能访问属于自己的session数据，而不能访问别的客户端的session数据。</p><ul><li>前后端分离推荐使用JWT认证机制。</li></ul><h2 id="在Express中使用Session认证"><a href="#在Express中使用Session认证" class="headerlink" title="在Express中使用Session认证"></a>在Express中使用Session认证</h2><p>下载express-session中间件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install express-session</span><br></pre></td></tr></table></figure><p>注册express-session中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">session</span>(&#123;</span><br><span class="line"><span class="attr">secret</span>: <span class="string">&#x27;keyboard cat&#x27;</span>,<span class="comment">// secret属性的值可以为任意字符串</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">false</span>,<span class="comment">// 固定写法</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span><span class="comment">// 固定写法</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/login&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 往session中存储数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="property">xxx1</span> = xxx1;</span><br><span class="line">req.<span class="property">session</span>.<span class="property">xxx2</span> = xxx2;</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/getXxx&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 取session中的数据</span></span><br><span class="line">res.<span class="title function_">send</span>(req.<span class="property">session</span>.<span class="property">xxx1</span> + <span class="string">&#x27;\n&#x27;</span> + req.<span class="property">session</span>.<span class="property">xxx2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/logout&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="comment">// 清空Session中的数据</span></span><br><span class="line">req.<span class="property">session</span>.<span class="title function_">destroy</span>();</span><br><span class="line">res.<span class="title function_">send</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="JWT跨域认证"><a href="#JWT跨域认证" class="headerlink" title="JWT跨域认证"></a>JWT跨域认证</h2><p>由于Cookie默认不支持跨域，如果使用Session+Cookie作为身份验证机制，配置会很麻烦。JWT（JSON Web Token）是目前最流行的跨域认证解决方案。</p><p><strong>JWT工作流程</strong></p><p>首先客户端（浏览器）会发送登陆请求，服务器接收到请求后先验证账号和密码，验证通过后会将用户的信息对象经过加密后生成Token字符串（服务端不会存储这个字符串），然后响应给客户端，客户端收到响应后会将Token存放在浏览器的LocalStorage或者SessionStorage中，当客户端再次发送请求的时候会通过请求头的Authorization字段将Token发送给服务器，服务器验证这个Token是否合法，解析为之前打包所对应的数据，然后针对数据发送对应的响应。<strong>JWT中不要携带密码信息</strong></p><p>JWT组成部分，三部分，使用“.”分隔</p><p>Header(头部).Payload(有效荷载).Signature(签名)</p><p>Header与Signature只与安全有关，防止破解。Payload是加密后的用户信息。</p><p><strong>客户端如何使用JWT？</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 推荐做法：将JWT放在HTTP请求同的Authorization字段中。</span><br><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><h2 id="在Express中使用JWT"><a href="#在Express中使用JWT" class="headerlink" title="在Express中使用JWT"></a>在Express中使用JWT</h2><p>安装JWT相关的包</p><p>jsonwebtoken 用于生成JWT字符串</p><p>express-jwt 用于将JWT字符串解析还原成JSON数据包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装如下两个JWT相关的包</span></span><br><span class="line">$ npm install jsonwebtoken express-jwt</span><br></pre></td></tr></table></figure><p>定义secret密钥：用于JWT加密与解密，建议命名为secretKey</p><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="comment">// 新版使用方法(7.7.7)，expressJWT为接收变量名，可任意更换</span></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">expressjwt</span>: expressJWT&#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义secret密钥（随意字符串）</span></span><br><span class="line"><span class="keyword">const</span> secretKey = <span class="string">&#x27;XXXX xxxx II&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置JWT解析中间件</span></span><br><span class="line"><span class="comment">// 这个algorithms必须配置，好像是配置加密算法</span></span><br><span class="line"><span class="comment">// expressJWT(&#123;&#125;)：配置解析</span></span><br><span class="line"><span class="comment">// expressJWT(&#123;&#125;).unless(&#123;&#125;)：配置哪些不使用解析</span></span><br><span class="line"><span class="comment">// 添加expressJWT中间件后，express会将解析的token信息挂载在req.user中</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressJWT</span>(&#123;</span><br><span class="line"><span class="attr">secret</span>: secretKey,</span><br><span class="line"><span class="attr">algorithms</span>: [<span class="string">&quot;HS256&quot;</span>]</span><br><span class="line">&#125;).<span class="title function_">unless</span>(&#123;</span><br><span class="line"><span class="attr">path</span>: [<span class="regexp">/^\/api\//</span>]</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 解析请求体JSON数据</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/api/user/login/action&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> user = req.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">name</span> === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; user.<span class="property">pwd</span> === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登陆成功！&#x27;</span>);</span><br><span class="line"><span class="comment">// 参数1：加密信息，必须为一个对象！</span></span><br><span class="line"><span class="comment">// 参数2：加密密钥</span></span><br><span class="line"><span class="comment">// 参数3：配置，有很多参数，这里只配置了token有效期为30秒</span></span><br><span class="line"><span class="keyword">const</span> tokenStr = jwt.<span class="title function_">sign</span>(&#123;<span class="attr">username</span>: user.<span class="property">name</span>&#125;,secretKey,&#123;<span class="attr">expiresIn</span>: <span class="string">&#x27;30s&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;登陆成功！&#x27;</span>,</span><br><span class="line"><span class="attr">token</span>: tokenStr</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;登陆失败！&#x27;</span>);</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">message</span>: <span class="string">&#x27;登陆失败！&#x27;</span>,</span><br><span class="line"><span class="attr">token</span>: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求此接口时应该在请求头的Authorization中添加token信息</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/info&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> user = req.<span class="property">user</span>;</span><br><span class="line"><span class="comment">// username为之前生成token时需要打包的数据中的字段</span></span><br><span class="line"><span class="keyword">if</span> (user.<span class="property">username</span> === admin) &#123;</span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;请求成功！&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加token解析异常中间件处理</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">err,req,res,next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err.<span class="property">name</span> === <span class="string">&#x27;UnauthorizedError&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">401</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;无效的token&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不是token错误</span></span><br><span class="line">res.<span class="title function_">send</span>(&#123;</span><br><span class="line"><span class="attr">code</span>: <span class="number">500</span>,</span><br><span class="line"><span class="attr">msg</span>: <span class="string">&#x27;未知的错误&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS入门 </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo建站感言</title>
      <link href="/2022/11/04/summary/hello-world/"/>
      <url>/2022/11/04/summary/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo-建站感言"><a href="#Hexo-建站感言" class="headerlink" title="Hexo 建站感言"></a>Hexo 建站感言</h2><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>历时三天，终于搞了一个基本能用的博客，非常激动！<br>其实之前我已经搭建过两三次博客了，但是都是照猫画虎，不知道为什么这样干，导致我最后无法维护我的博客，再加上搭建后就不想管了，之前的博客就逐渐被废弃了。虽然之前已经搭建过博客，但是本次重新搭建的期间还是遇到了很多的问题，只有疯狂百度，看别的博主发布的教程，最后还是都解决了，心累啊~</p><h3 id="为什么建设本站"><a href="#为什么建设本站" class="headerlink" title="为什么建设本站"></a>为什么建设本站</h3><p>首先就是因为周边的同学有，所以自己也想搞一个。而且写一些技术文章不仅能帮助别人，还能巩固知识，也可以在博客上分享一些趣事。<br>其实有很多的博客网站，例如CSDN和博客园之类的，但是它们的网站自由度不是很高，网站上不能挂自己想挂的东西，自己搭建的博客就有比较高的自由度了，可以按照自己喜欢的风格自定义。说不定这个以后还能帮助我拿到offer。</p><h3 id="对本站的打算"><a href="#对本站的打算" class="headerlink" title="对本站的打算"></a>对本站的打算</h3><p>前面也说到之前做过的博客网站都逐渐废弃了，但是这次想好好维护了，看到别人的博客网站有很多的文章，真的很羡慕啊，我也想要！之后打算把博客当备忘录用或者技术分享用，也就是记录一些编程学习过程中比较难记忆的内容，或者是自己踩过的坑，或者是一些个人感悟，抒发情绪之类的。目前的想法就是这样，以后可能会有改动，更新频率也不太确定，因为有时候很忙，有时候又没啥事儿，随缘更新。</p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本博客使用<a href="https://hexo.io/zh-cn/">Hexo博客框架</a>+<a href="https://butterfly.js.org/">butterfly博客主题</a>+<a href="https://gitee.com/help/articles/4136">Gitee Pages服务</a>+<a href="https://www.aliyun.com/product/oss">aliyunOSS对象存储服务</a>构建，有前人栽树搭建起来真的很方便啊，特别感谢<a href="https://hexo.io/zh-cn/">Hexo</a>以及<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>开源主题。<br>在此感谢我亲爱的室友<a href="https://gitee.com/jiaxinxiaobinggan">小马同学</a>画的背景图和头像，真的很好看呐。<br>也感谢正在看的你，因为有你才是我做此博客的目的。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 聊一聊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客管理</title>
      <link href="/2022/11/03/working/hexo-manage/"/>
      <url>/2022/11/03/working/hexo-manage/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客管理项目"><a href="#Hexo博客管理项目" class="headerlink" title="Hexo博客管理项目"></a>Hexo博客管理项目</h2><h3 id="基本使用方法"><a href="#基本使用方法" class="headerlink" title="基本使用方法"></a>基本使用方法</h3><p>常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm install<span class="comment"># 下载hexo博客管理依赖包</span></span><br><span class="line"></span><br><span class="line">$ hexo clean<span class="comment"># 清除之前生成的静态博客</span></span><br><span class="line"></span><br><span class="line">$ hexo generate<span class="comment"># 生成静态文件博客</span></span><br><span class="line"></span><br><span class="line">$ hexo server<span class="comment"># 启动本地博客服务</span></span><br><span class="line"></span><br><span class="line">$ hexo deploy<span class="comment"># 将静态博客发布到gitee</span></span><br></pre></td></tr></table></figure><p><strong>发布成功后应当更新pages服务</strong></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>如果不指定模板，创建的文章模板为post模板，并且会默认生成在&#x2F;source&#x2F;_posts目录中</p><p>创建post文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、指定创建post文章的目录</span></span><br><span class="line">$ hexo new --paht &lt;指定目录/文件名&gt; <span class="string">&quot;&lt;文章标题&gt;&quot;</span></span><br><span class="line"><span class="comment"># 例：如下命令表示在/source/_post目录下创建一个名为test/notes的目录</span></span><br><span class="line"><span class="comment"># 文章的文件名为vue2.md，并且会创建一个名为vue2的文件夹用于装此文章的图片资源等等，文章的标题为 Vue2入门笔记</span></span><br><span class="line">$ hexo new --path <span class="built_in">test</span>/notes/vue2 <span class="string">&quot;Vue2入门笔记&quot;</span></span><br></pre></td></tr></table></figure><p>指定Front-matter，就是每篇文章的基本信息，写在文章md文件的最前面，用—定义作用域。例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">&lt;!-- 文章标题 --&gt;</span><br><span class="line">title: Hexo建站感言</span><br><span class="line">&lt;!-- 文章封面 --&gt;</span><br><span class="line">cover: https://makun-ing-image-bed.oss-cn-chengdu.aliyuncs.com/hexo-gitee-blog/article/<span class="emphasis">_post/summary/hello-world/cover.jpg</span></span><br><span class="line"><span class="emphasis">&lt;!-- 是否开启评论 --&gt;</span></span><br><span class="line"><span class="emphasis">comments: true</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章分类，只能有一个 --&gt;</span></span><br><span class="line"><span class="emphasis">categories:</span></span><br><span class="line"><span class="emphasis">  - 总结</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章标签，可以有多个 --&gt;</span></span><br><span class="line"><span class="emphasis">tags:</span></span><br><span class="line"><span class="emphasis">  - 个人博客</span></span><br><span class="line"><span class="emphasis">  - 聊一聊</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章创建时间 --&gt;</span></span><br><span class="line"><span class="emphasis">date: 2022-11-04 15:41:22</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章更新时间 --&gt;</span></span><br><span class="line"><span class="emphasis">updated: 2022-11-07 13:16:22</span></span><br><span class="line"><span class="emphasis">&lt;!-- 文章置顶排序，数字越大越靠前 --&gt;</span></span><br><span class="line"><span class="emphasis">sticky: 100</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure><h3 id="Hexo博客管理相关链接"><a href="#Hexo博客管理相关链接" class="headerlink" title="Hexo博客管理相关链接"></a>Hexo博客管理相关链接</h3><ul><li><a href="https://vercel.com/makuning/hexo-gitee-blog-waline">vercel管理</a></li><li><a href="https://hexo-gitee-blog-waline.19marken.top/ui">vercel代理管理</a></li><li><a href="https://hexo-gitee-blog-waline-mpolgjsxt-makuning.vercel.app/ui">waline管理端</a></li><li><a href="https://butterfly.js.org/">hexo-theme-butterfly官方</a></li><li><a href="https://hexo.io/zh-cn/">hexo官方</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序运行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
